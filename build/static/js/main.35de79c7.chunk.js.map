{"version":3,"sources":["components/Cards/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","index.js"],"names":["Card","props","className","src","image","id","alt","name","onClick","shuffleImg","Wrapper","children","Score","total","status","App","state","images","clickedImgIds","score","goal","includes","setState","push","length","i","j","Math","floor","random","this","map","key","Component","ReactDOM","render","document","getElementById"],"mappings":"iuEAceA,G,MATF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,MAAOC,GAAIJ,EAAMI,GAAIC,IAAKL,EAAMM,KAC9CC,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMI,KAAKH,UAAU,qBCJ9CQ,G,MAFC,SAAAT,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAMU,YCY1CC,G,MAXD,SAAAX,GAAS,IAEbY,EAAkBZ,EAAlBY,MAAOC,EAAWb,EAAXa,OACf,OACE,yBAAKZ,UAAU,aACb,wBAAIA,UAAU,SAAd,eAAmCW,EAAnC,OACA,wBAAIX,UAAU,UAAUY,M,OCkEfC,G,iNAnEbC,MAAQ,CACNC,SACAC,cAAe,GACfC,MAAO,EACPC,KAAM,GACNN,OAAQ,I,EAIVL,WAAa,SAAAJ,GACX,IAAIa,EAAgB,EAAKF,MAAME,cAG/B,GAAIA,EAAcG,SAAShB,GAEzB,EAAKiB,SAAS,CAAEJ,cAAe,GAAIC,MAAO,EAAGL,OAAQ,oBAOrD,GAFAI,EAAcK,KAAKlB,GAEU,KAAzBa,EAAcM,OAAlB,CAKA,EAAKF,SAAS,CAAEL,SAAQC,gBAAeC,MAAOD,EAAcM,OAAQV,OAAQ,MAG5E,IAAK,IAAIW,EAAIR,EAAOO,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC1C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADE,EAEjB,CAACR,EAAOS,GAAIT,EAAOQ,IAA3CR,EAAOQ,GAFkC,KAE9BR,EAAOS,GAFuB,WAP1C,EAAKJ,SAAS,CAAEH,MAAO,GAAIL,OAAQ,WAAYI,cAAe,M,wEAe1D,IAAD,SACmBY,KAAKd,MAAvBG,EADD,EACCA,MAAOL,EADR,EACQA,OACf,OACE,yBAAKZ,UAAU,YACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,YAAb,iCAEF,kBAAC,EAAD,CAAOW,MAAOM,EAEZL,OAAQA,IAEV,yBAAKZ,UAAU,iBACb,kBAAC,EAAD,KACG4B,KAAKd,MAAMC,OAAOc,KAAI,SAAAd,GAAM,OAC3B,kBAAC,EAAD,CACER,WAAY,EAAKA,WACjBJ,GAAIY,EAAOZ,GACX2B,IAAKf,EAAOZ,GACZD,MAAOa,EAAOb,kB,GA1DZ6B,cCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.35de79c7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\n\n//Stateless component rendering images\nconst Card = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img src={props.image} id={props.id} alt={props.name}\n        onClick={() => props.shuffleImg(props.id)} className='shuffleScore' />\n    </div>\n  </div>\n);\n\nexport default Card;\n\n\n// function FriendCard(props) {\n//   return (\n//     <div className=\"card\">\n//       <div className=\"img-container\">\n//         <img alt={props.name} src={props.image} />\n//       </div>\n//       <div className=\"content\">\n//         <ul>\n//           <li>\n//             <strong>Name:</strong> {props.name}\n//           </li>\n//           <li>\n//             <strong>Occupation:</strong> {props.occupation}\n//           </li>\n//           <li>\n//             <strong>Location:</strong> {props.location}\n//           </li>\n//         </ul>\n//       </div>\n//       <span onClick={() => props.removeFriend(props.id)} className=\"remove\">\n//         ùòÖ\n//       </span>\n//     </div>\n//   );\n// }\n","import React from \"react\";\nimport \"./wrapper.css\";\n//Stateless component for Wrapper\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./score.css\"\n\n//Stateless functional component for score\nconst Score = props => {\n  // const Score = ({total, status}) => (  //destructuring v1 in the parameter\n  const { total, status } = props //destructuring v2 in the function's body. Extracting param from props\n  return (\n    <div className=\"gameScore\">\n      <h3 className=\"score\">Your Score: {total}/12</h3>\n      <h3 className=\"status\">{status}</h3>\n    </div>\n  )\n};\n\nexport default Score;","import React, { Component } from \"react\";\nimport Card from \"./components/Cards/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Score from \"./components/Score/Score\";\nimport images from \"./images.json\";\nimport \"./app.css\";\n\n\nclass App extends Component {\n  state = {   //the object that represents what can change\n    images, // json file\n    clickedImgIds: [],  //empty array\n    score: 0,  //\n    goal: 12,\n    status: \"\" // how to change color ???\n  };\n\n  //Shuffle the cards in the browser when clicked\n  shuffleImg = id => {\n    let clickedImgIds = this.state.clickedImgIds;\n\n    //if the array already includes the image...\n    if (clickedImgIds.includes(id)) {\n      //change score to 0, Game Over and empty array\n      this.setState({ clickedImgIds: [], score: 0, status: \"Game Over!\" });\n      // state.style({color: 'red'});\n      //  this.state.style={color: \"red\"}\n      return;\n    } else {\n      clickedImgIds.push(id)\n\n      if (clickedImgIds.length === 12) {\n        this.setState({ score: 12, status: \"You Won!\", clickedImgIds: [] });\n        return;\n      }\n\n      this.setState({ images, clickedImgIds, score: clickedImgIds.length, status: \" \" });\n\n      //randomize position of images\n      for (let i = images.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [images[i], images[j]] = [images[j], images[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component\n  render() {\n    const { score, status } = this.state; //destructuring \n    return (\n      <div className=\"app_main\">\n        <header className=\"app_header\">\n          <h1 className=\"app_title\">Clicky Game</h1>\n          <p className=\"app_rule\"> Click each image only once!</p>\n        </header >\n        <Score total={score}\n          // goal={8}\n          status={status}\n        />\n        <div className=\"app_container\">\n          <Wrapper>\n            {this.state.images.map(images => (\n              <Card\n                shuffleImg={this.shuffleImg}\n                id={images.id}\n                key={images.id}\n                image={images.image}\n              />\n            ))}\n          </Wrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}