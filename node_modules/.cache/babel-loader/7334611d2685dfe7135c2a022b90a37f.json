{"ast":null,"code":"var _jsxFileName = \"/Users/etiennewarneck/development/ASSIGNEMENTS/16.ClickAppGame/my-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Cards/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Score from \"./components/Score/Score\";\nimport images from \"./images.json\";\nimport \"./app.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //the object that represents what can change\n      images,\n      // json file\n      clickedImgIds: [],\n      //empty array\n      score: 0,\n      //\n      goal: 12,\n      status: \"\" // how to change color ???\n\n    };\n\n    this.shuffleImg = id => {\n      let clickedImgIds = this.state.clickedImgIds; //\n\n      if (clickedImgIds.includes(id)) {\n        this.setState({\n          clickedImgIds: [],\n          score: 0,\n          status: \"Game Over!\"\n        }); // state.style({color: 'red'});\n\n        this.status.style = {\n          color: \"red\"\n        };\n        return;\n      } else {\n        clickedImgIds.push(id);\n\n        if (clickedImgIds.length === 12) {\n          this.setState({\n            score: 12,\n            status: \"You Won!\",\n            clickedImgIds: []\n          });\n          return;\n        }\n\n        this.setState({\n          images,\n          clickedImgIds,\n          score: clickedImgIds.length,\n          status: \" \"\n        });\n\n        for (let i = images.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          [images[i], images[j]] = [images[j], images[i]];\n        }\n      }\n    };\n  }\n\n  // Map over this.state.cards and render a Card component\n  render() {\n    const {\n      score,\n      status\n    } = this.state; //destructuring \n\n    return React.createElement(\"div\", {\n      className: \"app_main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"app_header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"app_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Clicky Game\"), React.createElement(\"p\", {\n      className: \"app_rule\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" Click each image only once!\")), React.createElement(Score, {\n      total: score,\n      goal: 8,\n      status: status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"app_container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.state.images.map(images => React.createElement(Card, {\n      shuffleImg: this.shuffleImg,\n      id: images.id,\n      key: images.id,\n      image: images.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/etiennewarneck/development/ASSIGNEMENTS/16.ClickAppGame/my-app/src/App.js"],"names":["React","Component","Card","Wrapper","Score","images","App","state","clickedImgIds","score","goal","status","shuffleImg","id","includes","setState","style","color","push","length","i","j","Math","floor","random","render","map","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Cards/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Score from \"./components/Score/Score\";\nimport images from \"./images.json\";\nimport \"./app.css\";\n\n\nclass App extends Component {\n  state = {   //the object that represents what can change\n    images, // json file\n    clickedImgIds: [],  //empty array\n    score: 0,  //\n    goal: 12,\n    status: \"\" // how to change color ???\n  };\n\n  //Shuffle the cards in the browser when clicked\n  shuffleImg = id => {\n    let clickedImgIds = this.state.clickedImgIds;\n\n    //\n    if (clickedImgIds.includes(id)) {\n      this.setState({ clickedImgIds: [], score: 0, status: \"Game Over!\"});\n      // state.style({color: 'red'});\n     this.status.style={color: \"red\"};\n      return;\n    } else {\n      clickedImgIds.push(id)\n\n      if (clickedImgIds.length === 12) {\n        this.setState({ score: 12, status: \"You Won!\", clickedImgIds: [] });\n        return;\n      }\n\n      this.setState({ images, clickedImgIds, score: clickedImgIds.length, status: \" \" });\n\n      for (let i = images.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [images[i], images[j]] = [images[j], images[i]];\n      }\n    }\n  }\n\n  // Map over this.state.cards and render a Card component\n  render() {\n   const {score, status } = this.state; //destructuring \n     return (\n      <div className=\"app_main\">\n        <header className=\"app_header\">\n          <h1 className=\"app_title\">Clicky Game</h1>\n          <p className=\"app_rule\"> Click each image only once!</p>\n        </header >\n        <Score total={score}\n          goal={8}\n          status={status}\n        />\n        <div className=\"app_container\">\n        <Wrapper>\n          {this.state.images.map(images => (\n            <Card\n              shuffleImg={this.shuffleImg}\n              id={images.id}\n              key={images.id}\n              image={images.image}\n            />\n          ))}\n        </Wrapper>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}